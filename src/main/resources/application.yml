# SERVER ENDPOINT
server:
   host: ${SERVER_HOST:localhost}
   port: ${SERVER_PORT:8080}
   contextPath: ${SERVER_CONTEXT:/aac}
   tomcat:
     remote_ip_header: ${SERVER_TOMCAT_REMOTE_IP_HEADER:x-forwarded-for}
     protocol_header: ${SERVER_TOMCAT_PROTOCOL_HEADER:x-forwarded-proto}
   max-http-header-size: 16000     

# APPLICATION EXTERNAL URL
application:
   url: ${APPLICATION_EXT_URL:http://localhost:8080/aac}

# DB CONFIGURATION
jdbc:
   dialect: ${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
   driver: ${JDBC_DRIVER:org.h2.Driver}
   url: ${JDBC_URL:jdbc:h2:file:./data/db}
   user: ${JDBC_USER:ac}
   password: ${JDBC_PASS:ac}
   show-sql: false

# AAC ADMIN USER PASSWORD
admin:
   username: ${ADMIN_USERNAME:admin}
   password: ${ADMIN_PASSWORD:admin}
   contexts: apimanager, authorization, components, organizations, resources, services
   contextSpaces: components/apimanager/carbon.super
   roles: ${ADMIN_ROLES:components/apimanager/carbon.super:accountmanager, components/apimanager/carbon.super:profilemanager,components/apimanager/carbon.super:rolemanager}

# BASIC SECURITY PROPERTIES
security:
   restricted: false
   accesstoken:
      validity: ${ACCESS_TOKEN_VALIDITY:43200}
   refreshtoken:
      validity: ${REFRESH_TOKEN_VALIDITY:2592000}
   authcode:
      validity: ${AUTH_CODE_VALIDITY:600}      
   keystore: ${JWK_KEYSTORE:classpath:/keystore.jwks} 
   rememberme:
      key: ${REMEMBER_ME_KEY:REMEMBER_ME_SECRET_KEY}
   identity: # IDENTITY MAPPING SOURCE FILE
      source: ${IDENTITY_SOURCE:file:///path/to/identities.txt}
   redirects:
      matchports: ${REDIRECT_MATCH_PORTS:true}
      matchsubdomains: ${REDIRECT_MATCH_SUBDOMAINS:true}
   basic:
      enabled: false
   cie: # CIE 2-factor authentication properties
      idp: Smart Community
      pattern: Inserisci il PIN per accedere a %1$s tramite %2$s
      defaultsp: Smart Community
   cache:
      jwks: no-cache, no-store, max-age=0, must-revalidate #set cacheable with "public, max-age=3600, must-revalidate, no-transform"

#OAUTH2
oauth2:
   jwt: ${ENABLE_JWT:false}
   introspection:
      permitAll: ${OAUTH2_INTROSPECTION_PERMIT_ALL:true}
   pkce:
      allowRefresh: true
   clientCredentials:
      allowRefresh: true
   resourceOwnerPassword:
      allowRefresh: false
            
#JWT
jwt:
   issuer: ${JWT_ISSUER:${application.url}}
   kid:
      sig: ${JWT_KID_SIG:}
      enc: ${JWT_KID_ENC:}

#EXTERNAL PROVIDERS
authorities:
   enabled: ${AUTHORITIES:internal}

oauth-providers:
  providers:
    - provider: facebook
      client:
        clientId: ${OAUTH_FACEBOOK_CLIENTID:YOUR_FACEBOOK_CLIENT_ID}
        clientSecret: ${OAUTH_FACEBOOK_CLIENTSECRET:YOUR_FACEBOOK_CLIENT_SECRET}
        accessTokenUri: https://graph.facebook.com/oauth/access_token
        userAuthorizationUri: https://www.facebook.com/dialog/oauth
        preEstablishedRedirectUri: ${application.url}/auth/facebook-oauth/callback
        useCurrentUri: false
        tokenName: oauth_token
        authenticationScheme: query
        clientAuthenticationScheme: form
        scope:
            - openid
            - email
            - profile
    - provider: google
      client:
        clientId: ${OAUTH_GOOGLE_CLIENTID:YOUR_GOOGLE_CLIENT_ID}
        clientSecret: ${OAUTH_GOOGLE_CLIENTSECRET:YOUR_GOOGLE_CLIENT_SECRET}
        accessTokenUri: https://www.googleapis.com/oauth2/v3/token
        userAuthorizationUri: https://accounts.google.com/o/oauth2/auth
        preEstablishedRedirectUri: ${application.url}/auth/google-oauth/callback
        useCurrentUri: false
        clientAuthenticationScheme: form
        scope:
            - openid
            - email
            - profile
      resource:
        userInfoUri: https://www.googleapis.com/oauth2/v3/userinfo
        preferTokenInfo: true


# LOGGING CONFIGURATION
logging:
   level:
      ROOT: INFO
      it.smartcommunitylab.aac: ${LOG_LEVEL:INFO}

# SWAGGER
swagger:
   title:
      AAC: AAC API - Profile and token info
      AACApiKey: AAC API - API Access Key management
      AACAuthorization: AAC API - Authorization management
      AACRoles: AAC API - Role management
      AACOAuth2: AAC API - OAuth2.0 
      AACOpenID: AAC API - OpenID Connect
      AACServices: AAC API - Service Definitions
      AACClaims: AAC API - Custom User Claims
   description:
      AAC: Authorization and Authentication Control APIs - Profile and token info
      AACApiKey: Authorization and Authentication Control APIs - API Key validation and management
      AACAuthorization: Authorization and Authentication Control APIs - Authorization management
      AACRoles: Authorization and Authentication Control APIs - Role managment
      AACOAuth2: AAC API - OAuth2.0 operations 
      AACOpenID: AAC API - OpenID Connect implementation
      AACServices: AAC API - Service Definitions - Services (Resources), Scopes, Claims 
      AACClaims: AAC API - Custom User Claims Management
   version: 1.0.0
   license: Apache License, Version 2.0
   licenseUrl: http://www.apache.org/licenses/LICENSE-2.0
   contact:
      name: Smart Community Lab
      url: www.smartcommunitylab.it
      email: info@smartcommunitylab.it

# SPRING
spring:
   messages:
      basename: resources/internal
      encoding: UTF-8
   resources:
      cache-period: 3600
            
# ROLE PREFIX FOR AUTHORIZATION CHECK
authorization:
   contextSpace: 

# EMAIL SERVER FOR NOTIFICATIONS
mail:
   username: ${MAIL_USER:EMAIL_SENDER}
   password: ${MAIL_PASS:EMAIL_PASSWORD}
   host: ${MAIL_HOST:localhost}
   port: ${MAIL_PORT:25}
   protocol: ${MAIL_PROTOCOL:smtp}

# API Manager
api:
   contextSpace: components/apimanager

# DEFAULT ADMIN CLIENT  
adminClient:
    id: ${APIM_ID:API_MGT_CLIENT_ID}
    secret: ${APIM_SECRET:YOUR_MNGMT_CLIENT_SECRET}
    grantTypes: ${APIM_GRANT_TYPES:authorization_code,implicit,refresh_token,password,client_credentials,native}
    scopes: ${APIM_SCOPES:clientmanagement,orgmanagement,apimanagement,openid,email,profile,user.roles.me,user.roles.read,profile.basicprofile.me,profile.accountprofile.me,profile.basicprofile.all,profile.accountprofile.all}
    redirects: ${APIM_REDIRECTS:http://localhost:9443/store/jagg/jaggery_oidc_acs.jag,http://localhost:9443/publisher/jagg/jaggery_oidc_acs.jag}

bootstrap:
    apply: ${BOOTSTRAP_APPLY:false}
    file: ${BOOTSTRAP:classpath:/bootstrap.yaml} 


#port used to expose actuator
management:
   port: ${MANAGEMENT_PORT:8081} 
   
---
# SPRING
spring:
   profiles: authorization

# ROLE PREFIX FOR AUTHORIZATION CHECK
authorization:
   contextSpace: authorization   
   
