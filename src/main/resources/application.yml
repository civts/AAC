# SERVER ENDPOINT
server:
   host: ${SERVER_HOST:localhost}
   port: ${SERVER_PORT:8080}
   servlet:
     context-path: ${SERVER_CONTEXT:/}
   tomcat:
     remoteip:
      remote_ip_header: ${SERVER_TOMCAT_REMOTE_IP_HEADER:x-forwarded-for}
      protocol_header: ${SERVER_TOMCAT_PROTOCOL_HEADER:x-forwarded-proto}
   max-http-header-size: 32000     
   error:
      include-stacktrace: ON_TRACE_PARAM   

# APPLICATION EXTERNAL URL
application:
   url: ${APPLICATION_EXT_URL:http://localhost:8080}

# DB CONFIGURATION
jdbc:
   dialect: ${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
   driver: ${JDBC_DRIVER:org.h2.Driver}
   url: ${JDBC_URL:jdbc:h2:file:./data/db}
   user: ${JDBC_USER:ac}
   password: ${JDBC_PASS:ac}
   show-sql: false

# AAC ADMIN USER PASSWORD
admin:
   username: ${ADMIN_USERNAME:admin}
   password: ${ADMIN_PASSWORD:admin}
   contexts: apimanager, authorization, components, organizations, resources, services
   contextSpaces: components/apimanager/carbon.super
   roles: ${ADMIN_ROLES:}

# BASIC SECURITY PROPERTIES
security:
   restricted: false  
   keystore: ${JWK_KEYSTORE:classpath:/keystore.jwks} 
   rememberme:
      key: ${REMEMBER_ME_KEY:REMEMBER_ME_SECRET_KEY}
   identity: # IDENTITY MAPPING SOURCE FILE
      source: ${IDENTITY_SOURCE:file:///path/to/identities.txt}

#   basic:
#      enabled: false
   cie: # CIE 2-factor authentication properties
      idp: Smart Community
      pattern: Inserisci il PIN per accedere a %1$s tramite %2$s
      defaultsp: Smart Community
   cache:
      jwks: no-cache, no-store, max-age=0, must-revalidate #set cacheable with "public, max-age=3600, must-revalidate, no-transform"

#OAUTH2
oauth2:
   redirects:
      matchports: ${REDIRECT_MATCH_PORTS:true}
      matchsubdomains: ${REDIRECT_MATCH_SUBDOMAINS:true}
   jwt: ${ENABLE_JWT:true}
   introspection:
      permitAll: ${OAUTH2_INTROSPECTION_PERMIT_ALL:true}
   pkce:
      allowRefresh: true
   clientCredentials:
      allowRefresh: true
   resourceOwnerPassword:
      allowRefresh: false
   accesstoken:
      validity: ${ACCESS_TOKEN_VALIDITY:43200}
   refreshtoken:
      validity: ${REFRESH_TOKEN_VALIDITY:2592000}
   authcode:
      validity: ${AUTH_CODE_VALIDITY:600}          
            
#JWT
jwt:
   issuer: ${JWT_ISSUER:${application.url}}
   kid:
      sig: ${JWT_KID_SIG:}
      enc: ${JWT_KID_ENC:}
   claims:
      includeInternalRoles: false
      includeResourceRoles: false

#EXTERNAL PROVIDERS
authorities:
   enabled: ${AUTHORITIES:internal}
   internal:
      linking: false
      confirmation:
        required: true
        validity: 86400
      password:
        minLength: 8
        maxLength: 20
        requireAlpha: true
        requireNumber: false
        requireSpecial: false
        supportWhitespace: false
        reset:
          enabled: true
          validity: 86400


providers:
  identity:
  attributes:
  templates:
    internal:
    oidc:
      - clientName: Google
        clientAuthenticationMethod: basic
        scope: openid,profile,email
        authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
        tokenUri: https://www.googleapis.com/oauth2/v4/token
        jwkSetUri: https://www.googleapis.com/oauth2/v3/certs
        issuerUri: https://accounts.google.com
        userInfoUri: https://www.googleapis.com/oauth2/v3/userinfo
        userNameAttributeName: sub
      - clientName: Facebook
        clientAuthenticationMethod: post      
        scope: public_profile,email
        authorizationUri: https://www.facebook.com/v2.8/dialog/oauth
        tokenUri: https://graph.facebook.com/v2.8/oauth/access_token
        userInfoUri: https://graph.facebook.com/me?fields=id,name,email
        userNameAttributeName: id
      - clientName: GitHub
        clientAuthenticationMethod: basic      
        scope: read:user
        authorizationUri: https://github.com/login/oauth/authorize
        tokenUri: https://github.com/login/oauth/access_token
        userInfoUri: https://api.github.com/user
        userNameAttributeName: id        

attributesets:
  sets:
    - identifier: sub
      keys: sub      
    - identifier: profile
      keys: name,family_name,given_name,middle_name,nickname,preferred_username,profile,picture,website,gender,birthdate,zoneinfo,locale,updated_at
    - identifier: email
      keys: email,email_verified     
    - identifier: phone
      keys: phone_number,phone_number_verified 
    - identifier: address
      keys: formatted,street_address,locality,region,postal_code,country
    

oauth-providers:
  providers:
    - provider: facebook
      client:
        clientId: ${OAUTH_FACEBOOK_CLIENTID:YOUR_FACEBOOK_CLIENT_ID}
        clientSecret: ${OAUTH_FACEBOOK_CLIENTSECRET:YOUR_FACEBOOK_CLIENT_SECRET}
        accessTokenUri: https://graph.facebook.com/oauth/access_token
        userAuthorizationUri: https://www.facebook.com/dialog/oauth
        preEstablishedRedirectUri: ${application.url}/auth/facebook-oauth/callback
        useCurrentUri: false
        tokenName: oauth_token
        authenticationScheme: query
        clientAuthenticationScheme: form
        scope:
            - openid
            - email
            - profile
    - provider: google
      client:
        clientId: ${OAUTH_GOOGLE_CLIENTID:YOUR_GOOGLE_CLIENT_ID}
        clientSecret: ${OAUTH_GOOGLE_CLIENTSECRET:YOUR_GOOGLE_CLIENT_SECRET}
        accessTokenUri: https://www.googleapis.com/oauth2/v3/token
        userAuthorizationUri: https://accounts.google.com/o/oauth2/auth
        preEstablishedRedirectUri: ${application.url}/auth/google-oauth/callback
        useCurrentUri: false
        clientAuthenticationScheme: form
        scope:
            - openid
            - email
            - profile
      resource:
        userInfoUri: https://www.googleapis.com/oauth2/v3/userinfo
        preferTokenInfo: true


# LOGGING CONFIGURATION
logging:
   level:
      ROOT: INFO
      it.smartcommunitylab.aac: ${LOG_LEVEL:INFO}

# SWAGGER
swagger:
   title:
      AAC: AAC API - Profile and token info
      AACApiKey: AAC API - API Access Key management
      AACAuthorization: AAC API - Authorization management
      AACRoles: AAC API - Role management
      AACOAuth2: AAC API - OAuth2.0
      AACOpenID: AAC API - OpenID Connect
      AACServices: AAC API - Service Definitions
      AACClaims: AAC API - Custom User Claims
   description:
      AAC: Authorization and Authentication Control APIs - Profile and token info
      AACApiKey: Authorization and Authentication Control APIs - API Key validation and management
      AACAuthorization: Authorization and Authentication Control APIs - Authorization management
      AACRoles: Authorization and Authentication Control APIs - Role managment
      AACOAuth2: AAC API - OAuth2.0 operations
      AACOpenID: AAC API - OpenID Connect implementation
      AACServices: AAC API - Service Definitions - Services (Resources), Scopes, Claims
      AACClaims: AAC API - Custom User Claims Management
   version: 1.0.0
   license: Apache License, Version 2.0
   licenseUrl: http://www.apache.org/licenses/LICENSE-2.0
   contact:
      name: Smart Community Lab
      url: www.smartcommunitylab.it
      email: info@smartcommunitylab.it

# SPRING
spring:
   messages:
      basename: resources/internal
      encoding: UTF-8
   web:
      resources:
        cache.period: 3600
   h2.console.enabled: false       

# ROLE PREFIX FOR AUTHORIZATION CHECK
authorization:
   contextSpace:

# EMAIL SERVER FOR NOTIFICATIONS
mail:
   username: ${MAIL_USER:EMAIL_SENDER}
   password: ${MAIL_PASS:EMAIL_PASSWORD}
   host: ${MAIL_HOST:localhost}
   port: ${MAIL_PORT:25}
   protocol: ${MAIL_PROTOCOL:smtp}

# API Manager
api:
   contextSpace: components/apimanager

# DEFAULT ADMIN CLIENT
adminClient:
    id: ${APIM_ID:API_MGT_CLIENT_ID}
    secret: ${APIM_SECRET:YOUR_MNGMT_CLIENT_SECRET}
    grantTypes: ${APIM_GRANT_TYPES:authorization_code,implicit,refresh_token,password,client_credentials,native}
    scopes: ${APIM_SCOPES:clientmanagement,orgmanagement,apimanagement,openid,email,profile,user.roles.me,user.roles.read,profile.basicprofile.me,profile.accountprofile.me,profile.basicprofile.all,profile.accountprofile.all}
    redirects: ${APIM_REDIRECTS:http://localhost:9443/store/jagg/jaggery_oidc_acs.jag,http://localhost:9443/publisher/jagg/jaggery_oidc_acs.jag}

bootstrap:
    apply: ${BOOTSTRAP_APPLY:false}
    file: ${BOOTSTRAP:classpath:/bootstrap.yaml} 


#port used to expose actuator
management:
   server:
    port: ${MANAGEMENT_PORT:8081}

#---
## SPRING
#spring:
#   profiles: authorization
#
## ROLE PREFIX FOR AUTHORIZATION CHECK
#authorization:
#   contextSpace: authorization
