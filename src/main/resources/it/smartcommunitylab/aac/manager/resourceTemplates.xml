<?xml version="1.0" standalone="yes"?>
<!-- Copyright 2015-2019 Smart Community Lab, FBK Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://aac.smartcommunitylab.it/jaxbmodel"
	xsi:schemaLocation="http://aac.smartcommunitylab.it/jaxbmodel ../../../../../jaxb/binding/resourceTemplateSchema.xsd">
	<service name="Basic profile service" id="carbon.super-AAC-1.0.0">
		<description>Core service for managing basic user profiles.
		</description>

		<resourceMapping id="profile.basicprofile.me" name="Read user's basic profile"
			uri="profile.basicprofile.me" authority="ROLE_USER">
			<description>Basic profile of the current platform user. Read access
				only.</description>
		</resourceMapping>
    <resourceMapping id="profile" name="Read user's basic profile"
      uri="profile" authority="ROLE_USER">
      <description>Basic user profile data (name, surname, email). Read access
        only.</description>
    </resourceMapping>
    <resourceMapping id="email" name="Read user's email"
      uri="email" authority="ROLE_USER">
      <description>Basic user's email.</description>
    </resourceMapping>
		<resourceMapping id="profile.basicprofile.all" name="Read all basic profiles"
			uri="profile.basicprofile.all" authority="ROLE_ANY" roles="apimanager/carbon.super:profilemanager">
			<description>Basic profile of the platform users. Read access only.
			</description>
		</resourceMapping>
		<resourceMapping id="profile.accountprofile.me" name="Read user's account profile"
			uri="profile.accountprofile.me" authority="ROLE_USER">
			<description>Account profile of the current platform user. Read
				access only.</description>
		</resourceMapping>
		<resourceMapping id="profile.accountprofile.all" name="Read all account profiles"
			uri="profile.accountprofile.all" authority="ROLE_CLIENT" roles="apimanager/carbon.super:accountmanager">
			<description>Account profile of the platform users. Read access only.
			</description>
		</resourceMapping>
		<apiKey>admin-AAC-1.0.0</apiKey>
	</service>

  <service name="API Key management service" id="carbon.super-AACKeys-1.0.0">
    <description>Core service for managing API Keys for key-based client app security.
    </description>

    <apiKey>admin-AACKeys-1.0.0</apiKey>
  </service>
  
  
	<service name="User management service" id="smartcommunity.usermanagement">
		<description>Core service for managing basic user profiles.
		</description>

		<resourceMapping id="usermanagement" name="Manage users"
			uri="usermanagement" authority="ROLE_CLIENT" approvalRequired="true">
			<description>Manage user data programmatically.</description>
		</resourceMapping>

	</service>

	<service name="API Management Service" id="smartcommunity.apimanagement">
		<description>Core service for managing clients and APIs.</description>

		<resourceMapping id="clientmanagement" name="Manage clients"
			uri="clientmanagement" authority="ROLE_CLIENT" approvalRequired="true">
			<description>Manage clients programmatically.</description>
		</resourceMapping>
		<resourceMapping id="apimanagement" name="Manage APIs"
			uri="apimanagement" authority="ROLE_CLIENT" approvalRequired="true">
			<description>Manage APIs programmatically.</description>
		</resourceMapping>

	</service>

	<service name="Role Management Service" id="carbon.super-AACRoles-1.0.0">
		<description>Core service for managing user roles.</description>

		<resourceMapping id="user.roles.me" name="Read user roles"
			uri="user.roles.me" authority="ROLE_USER">
			<description>Read roles of the current user.</description>
		</resourceMapping>
		<resourceMapping id="user.roles.write" name="Write user roles"
			uri="user.roles.write" authority="ROLE_CLIENT">
			<description>Modify the roles of the specified user within a tenant.
			</description>
		</resourceMapping>
		<resourceMapping id="user.roles.read" name="Read user roles"
			uri="user.roles.read" authority="ROLE_CLIENT">
			<description>Read the roles of the specified user within a tenant.
			</description>
		</resourceMapping>
		<resourceMapping id="user.roles.read.all" name="Read arbitrary user roles"
			uri="user.roles.read.all" authority="ROLE_CLIENT" >
			<description>Read the roles of any user.</description>
		</resourceMapping>
		<resourceMapping id="client.roles.read.all" name="Read client app roles"
			uri="client.roles.read.all" authority="ROLE_CLIENT">
			<description>Read the roles of any app client.</description>
		</resourceMapping>
		<apiKey>admin-AACRoles-1.0.0</apiKey>
	</service>

	<service name="Authorization Service" id="carbon.super-AACAuthorization-1.0.0">
		<description>Core service for managing peer-to-peer authorizations and
			authorization schemas</description>

		<resourceMapping id="authorization.manage" name="Modify authorizations"
			uri="authorization.manage" authority="ROLE_CLIENT">
			<description>Modify authorizations</description>
		</resourceMapping>
		<resourceMapping id="authorization.schema.manage"
			name="Manage authorization schema" uri="authorization.schema.manage"
			authority="ROLE_CLIENT">
			<description>Manage authorization schema</description>
		</resourceMapping>
		<apiKey>admin-AACAuthorization-1.0.0</apiKey>
	</service>



</services>
